import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.List;
import java.util.concurrent.ThreadLocalRandom;
import java.util.stream.Collectors;

public class MyQuoteBot extends TelegramLongPollingBot {
    private final String token, username;

    // üîí —Ç–≤–æ–π Telegram ID (–ø–æ–º–µ–Ω—è–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    private static final long ADMIN_ID = 419535607L;

    // ‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (SQLite)
    private final UserRepo repo = new UserRepo("data/bot.db");

    // –ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä —Ü–∏—Ç–∞—Ç
    private static final List<String> QUOTES = List.of(
            "–í—Å–µ –≥–µ–Ω–∏–∞–ª—å–Ω–æ–µ ‚Äî –ø—Ä–æ—Å—Ç–æ.",
            "–î–µ–ª–∞–π, —á—Ç–æ –º–æ–∂–µ—à—å, —Å —Ç–µ–º, —á—Ç–æ –∏–º–µ–µ—à—å.",
            "–ü—É—Ç—å –≤ —Ç—ã—Å—è—á—É –ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞.",
            "–ö–∞–ø–ª—è –∫–∞–º–µ–Ω—å —Ç–æ—á–∏—Ç ‚Äî –Ω–µ —Å–∏–ª–æ–π, –∞ —á–∞—Å—Ç—ã–º –ø–∞–¥–µ–Ω–∏–µ–º.",
            "–°–ª–æ–∂–Ω–æ–µ ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ, –Ω–æ —Å–¥–µ–ª–∞–Ω–Ω–æ–µ."
    );

    public MyQuoteBot(String token, String username) {
        this.token = token;
        this.username = username;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
        repo.ensureSchema();

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã (–º–µ–Ω—é Telegram)
        try {
            execute(new SetMyCommands(
                    List.of(
                            new BotCommand("start", "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏"),
                            new BotCommand("help",  "–∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º"),
                            new BotCommand("quote", "—Å–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –∏–ª–∏ –ø–æ–∏—Å–∫: /quote <—Ç–µ–º–∞>"),
                            new BotCommand("me",    "–∏–Ω—Ñ–∞ –æ —Ç–µ–±–µ"),
                            new BotCommand("stats", "–æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)")
                    ),
                    new BotCommandScopeDefault(),
                    null
            ));
        } catch (Exception e) {
            e.printStackTrace(); // –Ω–µ –ø–∞–¥–∞–µ–º, –µ—Å–ª–∏ –º–µ–Ω—é –Ω–µ –≤—ã—Å—Ç–∞–≤–∏–ª–æ—Å—å
        }
    }

    @Override public String getBotToken() { return token; }
    @Override public String getBotUsername() { return username; }

    @Override
    public void onUpdateReceived(Update u) {
        // 1) –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∏ –≤—ã—Ö–æ–¥–∏–º
        if (u.hasMessage() && u.getMessage().getFrom() != null) {
            User from = u.getMessage().getFrom();
            repo.upsertHit(from.getId(), from.getUserName(), from.getFirstName(), from.getLastName());
        } else if (u.hasCallbackQuery()) {
            User from = u.getCallbackQuery().getFrom();
            repo.upsertHit(from.getId(), from.getUserName(), from.getFirstName(), from.getLastName());
        }

        // 2) –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        if (!u.hasMessage() || !u.getMessage().hasText()) return;
        long chatId = u.getMessage().getChatId();
        String text = u.getMessage().getText().trim();

        if (text.equals("/start")) {
            // –ü–æ–∫–∞–∂–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            reply(chatId, """
        –ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–∏—Å—ã–ª–∞—é –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —Ü–∏—Ç–∞—Ç—ã.
        –ß—Ç–æ–±—ã —è –º–æ–≥ –∑–∞–ø–∏—Å–∞—Ç—å —Ç–≤–æ–π –Ω–æ–º–µ—Ä ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá
        """);

            // –ü–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫—É "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä"
            BotUtils.sendContactRequest(this, chatId);
            return;
        }


        if (text.equals("/help")) {
            reply(chatId, """
                    –°–ø—Ä–∞–≤–∫–∞:
                    ‚Ä¢ /quote ‚Äî –ø—Ä–∏—à–ª—é —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É.
                    ‚Ä¢ /quote <—Ç–µ–º–∞> ‚Äî –Ω–∞–π–¥—É —Ü–∏—Ç–∞—Ç—É –ø–æ —Å–ª–æ–≤—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: /quote –ø—É—Ç—å).
                    –ü–æ–¥—Å–∫–∞–∑–∫–∏:
                    ‚Ä¢ –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å ¬´–ú–µ–Ω—é¬ª –∏ –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É;
                    ‚Ä¢ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî —É—Ç–æ—á–Ω–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.
                    """);
            return;
        }

        if (text.equals("/me")) {
            long userId = u.getMessage().getFrom().getId();
            var s = repo.get(userId);
            String out = (s == null)
                    ? "–ü–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ."
                    : String.format("–¢—ã: %s\nid: %d\n–¢–µ–ª–µ—Ñ–æ–Ω: %s\n–ó–∞–ø—Ä–æ—Å–æ–≤: %d",
                    s.displayName(), s.userId, (s.phone==null? "‚Äî" : s.phone), s.hits);
            reply(chatId, out);
            return;
        }




        if (text.startsWith("/quote")) {
            String query = text.replaceFirst("^/quote\\s*", "").trim();
            if (query.isEmpty()) {
                reply(chatId, randomQuote());
            } else {
                String qLower = query.toLowerCase();
                List<String> hits = QUOTES.stream()
                        .filter(s -> s.toLowerCase().contains(qLower))
                        .collect(Collectors.toList());
                if (hits.isEmpty()) reply(chatId, "–ù–∏—á–µ–≥–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: " + query);
                else reply(chatId, hits.get(ThreadLocalRandom.current().nextInt(hits.size())));
            }
            return;
        }


        if (text.equals("/phone")) {
            BotUtils.sendContactRequest(this, chatId);
            return;
        }
        if (text.startsWith("/")) {
            reply(chatId, "–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –û—Ç–∫—Ä–æ–π /help ‚Äî —Ç–∞–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.");
        }
    }

    private String randomQuote() {
        return QUOTES.get(ThreadLocalRandom.current().nextInt(QUOTES.size()));
    }

    private void reply(long chatId, String text) {
        try {
            execute(SendMessage.builder().chatId(chatId).text(text).build());
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}
